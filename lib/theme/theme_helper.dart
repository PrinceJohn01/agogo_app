import 'package:agogo_app/core/app_export.dart';
import 'package:flutter/material.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [newTheme].
  void changeTheme(String newTheme) {
    _appTheme = newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.gray100,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(6.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(6.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: const BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: colorScheme.onPrimary,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 14.fSize,
          fontFamily: 'Public Sans',
          fontWeight: FontWeight.w300,
        ),
        bodySmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 8.fSize,
          fontFamily: 'Public Sans',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: appTheme.red400,
          fontSize: 26.fSize,
          fontFamily: 'Sora',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 12.fSize,
          fontFamily: 'Sora',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: colorScheme.errorContainer,
          fontSize: 10.fSize,
          fontFamily: 'Public Sans',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 8.fSize,
          fontFamily: 'Public Sans',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 22.fSize,
          fontFamily: 'Public Sans',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 16.fSize,
          fontFamily: 'Public Sans',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 14.fSize,
          fontFamily: 'Public Sans',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF15158C),
    primaryContainer: Color(0XFF6F727A),
    secondary: Color(0XFF6F727A),
    secondaryContainer: Color(0XFF15158C),
    tertiary: Color(0XFF6F727A),
    tertiaryContainer: Color(0XFF15158C),

    // Background colors
    background: Color(0XFF6F727A),

    // Surface colors
    surface: Color(0XFF6F727A),
    surfaceTint: Color(0XFFA8A8A8),
    surfaceVariant: Color(0XFF15158C),

    // Error colors
    error: Color(0XFFA8A8A8),
    errorContainer: Color(0XFF292989),
    onError: Color(0XFF15158C),
    onErrorContainer: Color(0XFFFFFFFF),

    // On colors(text colors)
    onBackground: Color(0X99151515),
    onInverseSurface: Color(0XFF15158C),
    onPrimary: Color(0XFFA8A8A8),
    onPrimaryContainer: Color(0X99151515),
    onSecondary: Color(0X99151515),
    onSecondaryContainer: Color(0XFFA8A8A8),
    onTertiary: Color(0X99151515),
    onTertiaryContainer: Color(0XFFA8A8A8),

    // Other colors
    outline: Color(0XFFA8A8A8),
    outlineVariant: Color(0XFF6F727A),
    scrim: Color(0XFF6F727A),
    shadow: Color(0XFFA8A8A8),

    // Inverse colors
    inversePrimary: Color(0XFF6F727A),
    inverseSurface: Color(0XFFA8A8A8),

    // Pending colors
    onSurface: Color(0X99151515),
    onSurfaceVariant: Color(0XFFA8A8A8),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber500 => const Color(0XFFFFC107);
  Color get amber50001 => const Color(0XFFFDBC14);

  // Black
  Color get black900 => const Color(0XFF020C1F);
  Color get black90001 => const Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => const Color(0XFFD1D1D1);
  Color get blueGray400 => const Color(0XFF888888);
  Color get blueGray50 => const Color(0XFFECF6F6);
  Color get blueGray5001 => const Color(0XFFF1F1F1);
  Color get blueGray60007 => const Color(0X0743578B);
  Color get blueGray900 => const Color(0XFF353531);

  // Cyan
  Color get cyan50 => const Color(0XFFC4FFFF);
  Color get cyan600 => const Color(0XFF19B2B8);

  // DeepOrange
  Color get deepOrange100 => const Color(0XFFF6B6B6);
  Color get deepOrange50 => const Color(0XFFF7ECDE);
  Color get deepOrange80023 => const Color(0X23C7512C);

  // Gray
  Color get gray100 => const Color(0XFFF5F5F5);
  Color get gray200 => const Color(0XFFEAEAEA);
  Color get gray50 => const Color(0XFFF9F9F9);
  Color get gray5001 => const Color(0XFFFAFAFA);
  Color get gray700 => const Color(0XFF575757);

  // Indigo
  Color get indigo100 => const Color(0XFFCCCCFF);
  Color get indigo300 => const Color(0XFF7A7ACC);
  Color get indigo50 => const Color(0XFFEDEDFF);
  Color get indigo500 => const Color(0XFF4561A8);
  Color get indigo50001 => const Color(0XFF4560A8);
  Color get indigo600 => const Color(0XFF3B5598);
  Color get indigo900 => const Color(0XFF092E76);

  // Orange
  Color get orange300 => const Color(0XFFF8B968);

  // Red
  Color get red300 => const Color(0XFFEA6F6F);
  Color get red400 => const Color(0XFFE54B4B);
  Color get red50 => const Color(0XFFFFECEC);
  Color get red800 => const Color(0XFFC72C2C);

  // White
  Color get whiteA700 => const Color(0XFFFDFDFD);

  // Yellow
  Color get yellow800 => const Color(0XFFF8991D);
  Color get yellow80001 => const Color(0XFFF79E1B);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
